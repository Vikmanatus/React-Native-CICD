def get_versioning_element(key)
  versioning_element = sh "cd ../ && node ./scripts/build/scripts/versioning.js --required " + key
  return versioning_element.gsub("\n", "")
end

desc "Formatting version numbers for production release"
lane :format_versioning_element do |options|
  sh "cd ../ && node ./scripts/build/scripts/format.version.number.js --required " + options[:key]
  compile_versioning_scripts
end

desc "Synchronizing if required and incrementing version numbers for App Center release"
lane :sync_and_update_versioning_element do |options|
  sh "cd ../ && node ./scripts/build/scripts/sync.versioning.js"
  sh "cd ../ && node ./scripts/build/scripts/increment.version.js --required " + options[:key]
  compile_versioning_scripts
end

desc "Installing versioning scripts dependencies"
lane :install_versioning_dependencies do
  sh "cd ../ && cd ./scripts && yarn install"
end

desc "Compiling Typescripts version handling files to Javascript"
lane :compile_versioning_scripts do
  sh "cd ../ && cd ./scripts && tsc"
end

desc "Check version file integrity"
lane :check_versioning_integrity do
  compile_versioning_scripts
  if ENV["CI"]
    sh "cd ../ && node ./scripts/build/scripts/version.error.handling.js"
  elsif ENV["FASTLANE_LOCAL_ENV"]
    print("\nAs we are in local fastlane environment, you have already requested on which platform the release is wanted, so we can skip the check of the toDeploy array\n")
    sh "cd ../ && node ./scripts/build/scripts/version.error.handling.js --skip-to-deploy-check"
  end
end

platform :android do
  desc "Check Play Console API access"
  lane :check_play_store_api_access do |options|
    validate_play_store_json_key
  end

  desc "Compile Android release in chosen type passed by parameter"
  lane :compile_android_app do |options|
    gradle(task: "clean", project_dir: "./android")
    gradle(task: options[:release_type], build_type: "Release", project_dir: "./android")
  end

  desc "Fetch AppCenter latest release"
  lane :check_appcenter_latest_release_info do |options|
    appcenter_fetch_version_number(
      api_token: ENV["APPCENTER_ANDROID_TOKEN"],
      owner_name: ENV["APPCENTER_OWNER"],
      app_name: ENV["APPCENTER_ANDROID_APPNAME"],
      version: "variable permettant de récupérer les fichiers de version.json", # optional, don't set this value to get the last upload of all versions
    )
  end

  desc "Update Android code version and build number"
  lane :update_android_version do |options|
    if ENV["DEPLOYMENT_ANDROID"] == "appcenter" || ENV["DEPLOYMENT_ANDROID"] == "dev"
      sync_and_update_versioning_element(key: "code-version")
    elsif ENV["DEPLOYMENT_ANDROID"] == "release"
      format_versioning_element(key: "code-version")
    end

    version_number_android = String(get_versioning_element("version-number"))
    code_version = String(get_versioning_element("code-version")).to_i()

    gradleFile = "./android/app/build.gradle"

    android_set_version_code(
      gradle_file: gradleFile,
      version_code: code_version,
    )
    android_set_version_name(
      gradle_file: gradleFile,
      version_name: version_number_android,
    )
  end

  desc "Release Android application"
  lane :release do |options|
    automated_versioning
    # install_versioning_dependencies
    # check_versioning_integrity
    # update_android_version
    # filename=""
    # if ENV["DEPLOYMENT_ANDROID"] == "appcenter" || ENV["DEPLOYMENT_ANDROID"] == "dev"
    #   filename="react-native-cicd-V" +  version_number + "-" + code_version + ".apk"
    #   compile_android_app(release_type: "assemble")
    #   sh "rm -f ../" + filename
    #   sh "cp ../android/app/build/outputs/apk/release/app-release.apk ../" + filename
    #   appcenter_upload(
    #     api_token: ENV["APPCENTER_ANDROID_TOKEN"],
    #     owner_name: ENV["APPCENTER_OWNER"],
    #     owner_type: "user",
    #     app_name: ENV["APPCENTER_ANDROID_APPNAME"],
    #     file: filename,
    #     notify_testers: true,
    #   )
    # elsif ENV["DEPLOYMENT_ANDROID"] == "release"
    #   filename="react-native-cicd-V" +  version_number + "-" + code_version + ".aab"
    #   compile_android_app(release_type: "bundle")
    #   sh "rm -f ../" + filename
    #   sh "cp ../android/app/build/outputs/bundle/release/app-release.aab ../" + filename
    #   # Release to play store later
    # end
  end
end

platform :ios do
  desc "Update iOS version code and build number"
  lane :update_ios_version do |options|
    sh "echo 'Going to update iOS version code and build number'"
  end
end
